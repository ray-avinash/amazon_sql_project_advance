---ERD

select * from category;
select * from customers;
select * from inventory;
select * from order_items;
select * from orders;
select * from payments;

select distinct payment_status from payments;

select payment_status, count(payment_status)
from payments
group by payment_status;

select * from products;
select * from sellers;
select * from shipping;

select * from shipping
where return_date is null;



-- Advanced Business Problems

/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/

with t as (
select p.product_id, p.product_name, sum(oi.quantity) as total_quantity, 
round(sum(oi.quantity * oi.price_per_unit)::numeric, 2) as total_sales_value
from order_items as oi
left join products as p
using (product_id)
group by 1, 2)

select * from t
order by total_sales_value desc
limit 10;

/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/

with g as(
with f as (
select * from category as c
Left join products as p
using (category_id)
Left join order_items as oi
using (product_id)
)
select category_name, 
round(sum(quantity*price_per_unit)::numeric, 2) as revenue
from f
group by category_name)

select *,
round(revenue/(select sum(revenue) from g)*100, 2) as percent_contribution
from g;

/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/
with i as (
with h as(
select *, round(quantity*price_per_unit::numeric, 2) as revenue from customers as c
Left join orders as o
using(customer_id)
Left join order_items
using(order_id))

select customer_id, count(customer_id) as no_of_orders, sum(revenue) as total_spend
from h
group by 1
order by no_of_orders desc)

select *, round(total_spend/no_of_orders, 2) as AOV from i
where no_of_orders > 5;

/*
4. Monthly Sales Trend
Query monthly total sales over the past 3 year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/

WITH enriched_payments AS (
    SELECT 
        p.*,
        oi.product_id,
        oi.quantity,
        oi.price_per_unit,
        ROUND(oi.quantity * oi.price_per_unit::numeric, 2) AS revenue,
        EXTRACT(YEAR FROM p.payment_date) AS yearly,
        TO_CHAR(p.payment_date, 'FMMonth') AS monthly
    FROM payments AS p
    LEFT JOIN order_items AS oi USING(order_id)
    WHERE p.payment_date >= CURRENT_DATE - INTERVAL '3 year'
)
SELECT 
    yearly, 
    monthly, 
    SUM(revenue) AS total_revenue,
	lag(SUM(revenue)) over (order by yearly, monthly)
FROM enriched_payments
GROUP BY yearly, monthly
ORDER BY yearly, TO_DATE(monthly, 'Month');

/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/
with l as (
with k as (
select customer_id, count(order_id) as no_of_orders
from customers as c
left join orders as o
using (customer_id)
group by 1
order by no_of_orders)

select * from k 
where no_of_orders = 0)

select * from l
left join customers
using (customer_id)

/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/

with n as (
with m as(
select * from products as p
left join category as c
using(category_id)
left join order_items
using (product_id)
left join orders
using(order_id)
left join customers
using(customer_id))

select state, category_name, count(category_name) as counted, round(sum(quantity*price_per_unit)::numeric, 2) as revenue,
rank() over(partition by state order by count(category_name))
from m
group by state, category_name
order by state, count(category_name))

select * from n 
where rank = 1
order by counted desc;

/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/

select c.customer_id,
concat(c.first_name, ' ', c.last_name) as full_name,
round(sum(oi.quantity * oi.price_per_unit)::numeric,2) as cliv,
dense_rank() over (order by round(sum(oi.quantity * oi.price_per_unit)::numeric,2) desc)
from customers as c
inner join orders as o
using(customer_id)
inner join order_items as oi
using (order_id)
group by c.customer_id

/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/

select * 
from products as p
left join inventory as inv
using (product_id)
where inv.stock < 10

/*
9. Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/

select * , shipping_date - order_date as delay
from orders as o
left join shipping as s
using (order_id)
where shipping_date - order_date > 3


/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/

with o as(
select payment_status, count(payment_status) as counted
from payments
group by payment_status)

select *,
round(counted/(select sum(counted) from o)*100, 2) as percent
from o

/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/

with r as (
with p as(
select seller_id, seller_name,
round(sum(oi.quantity*oi.price_per_unit)::numeric, 2) as sales
from orders as o
left join sellers as s
using(seller_id)
left join order_items as oi
using (order_id)
group by seller_id, seller_name
order by sales desc
limit 5),
q as (
select s.seller_id, o.order_status, count(o.order_status)
from orders as o
left join sellers as s
using(seller_id)
left join order_items as oi
using (order_id)
group by 1, 2)

select * from p
inner join q
using (seller_id)
order by seller_id


/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/

select *, 
round(price-cogs::numeric) as margin,
dense_rank() over (order by round(price-cogs::numeric) desc)
from products

/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/

with s as (
select p.product_id, p.product_name, count(o.order_status) as total_returns
from orders as o
left join order_items as oi
using (order_id)
left join products as p
using (product_id)
where o.order_status = 'Returned'
group by 1, 2, order_status
order by total_returns desc
limit 10),

t as (select p.product_id, p.product_name, count(o.order_status) as total_status
from orders as o
left join order_items as oi
using (order_id)
left join products as p
using (product_id)
group by 1, 2
order by total_status desc)

select product_id, total_returns, total_status, 
round(total_returns::numeric/total_status::numeric*100, 2) as percent_returns
from s
inner join t
using (product_id)


/*
14. Orders Pending Shipment
Find orders that have been paid but are still pending shipment.
Challenge: Include order details, payment date, and customer information.
*/

with u as (
select * 
from orders as o
left join customers
using (customer_id)
left join payments as p
using (order_id)
where order_status = 'Inprogress')

select * from u
where payment_status = 'Payment Successed'


/*
15. Inactive Sellers
Identify sellers who havenâ€™t made any sales in the last 18 months.
Challenge: Show the last sale date and total sales from those sellers.
*/
with w as (
with v as (
select seller_id, seller_name, count(*) 
from sellers as s
left join orders as o
using (seller_id)
where order_date >= current_date - interval '18 months'
group by 1, 2)

select s.seller_id, s.seller_name, count
from sellers as s
left join v
using (seller_id)
where count is null),

y as (select seller_id, sum(oi.quantity*oi.price_per_unit) as sales
from sellers as s
left join orders as o
using (seller_id)
left join order_items as oi
using (order_id)
group by 1
order by 1)

select * from w
left join y
using (seller_id)

/*
16. IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/

with x as (
select c.customer_id, concat(c.first_name, ' ', c.last_name) as full_name,
count(*) as no_of_returns
from customers as c
left join orders as o
using (customer_id)
where order_status = 'Returned'
group by 1, 2)

select c.customer_id, c.first_name, c.last_name, x.no_of_returns,
case when no_of_returns > 5 then 'returning' else 'new' end as cus_type
from customers as c
left join x
using (customer_id)

/*
17. Cross-Sell Opportunities
Find customers who purchased product A but not product B (e.g., customers who bought AirPods but not AirPods Max).
Challenge: Suggest cross-sell opportunities by displaying matching product categories.
*/


WITH product_ids AS (
    SELECT 
        MAX(CASE WHEN product_name = 'AirPods' THEN product_id END) AS airpods_id,
        MAX(CASE WHEN product_name = 'AirPods Max' THEN product_id END) AS airpods_max_id
    FROM products
),

customers_who_bought AS (
    SELECT DISTINCT o.customer_id
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN product_ids p ON oi.product_id = p.airpods_id
),

customers_who_did_not_buy AS (
    SELECT DISTINCT o.customer_id
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN product_ids p ON oi.product_id = p.airpods_max_id
),

target_customers AS (
    SELECT c.customer_id
    FROM customers_who_bought c
    LEFT JOIN customers_who_did_not_buy d ON c.customer_id = d.customer_id
    WHERE d.customer_id IS NULL
),

recommendations AS (
    SELECT 
        tc.customer_id,
        c.category_name,
        pr.product_name AS suggested_product
    FROM target_customers tc
    JOIN orders o ON tc.customer_id = o.customer_id
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN products pr ON oi.product_id = pr.product_id
    JOIN category c ON pr.category_id = c.category_id
    WHERE pr.product_name = 'AirPods'
)

SELECT DISTINCT customer_id, category_name, 'AirPods Max' AS suggested_product
FROM recommendations;



/*
18. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/


with y as (
select c.state, c.customer_id, count(*),
round(sum(quantity*price_per_unit)::numeric, 2) as total_sales,
dense_rank() over(partition by c.state order by count(*) desc) 
from orders as o
inner join customers as c
using (customer_id)
inner join order_items as oi
using (order_id)
group by 1, 2)

select * from y
where dense_rank <= 5;


/*
19. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/
with z as(
select *, round(oi.quantity*oi.price_per_unit::numeric, 2) as revenue,
shipping_date-order_date as delay
from shipping as s
left join order_items as oi
using (order_id)
left join orders as o
using (order_id)
)

select shipping_providers, count(*) as total_orders, 
sum(revenue) as total_revenue,
sum(delay)/count(*) as average_delay
from z
group by 1


/*
20. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result

Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/

with ac as (
with ab as (
select * , quantity*price_per_unit as revenue, extract(year from order_date) as yearly
from order_items as oi
left join products as p
using (product_id)
left join orders as o
using(order_id)
)
select product_id, yearly, round(sum(revenue)) as total_sales1 from ab
where yearly = 2022
group by 1, 2),

ad as (with bb as (
select * , quantity*price_per_unit as revenue, extract(year from order_date) as yearly
from order_items as oi
left join products as p
using (product_id)
left join orders as o
using(order_id)
)
select product_id, yearly, round(sum(revenue)) as total_sales2 from bb
where yearly = 2023
group by 1, 2)

select *, round((total_sales2-total_sales1)/total_sales1*100) as DR from ac
left join ad
using(product_id)
order by dr
limit 10;



/*
Final Task
-- Store Procedure
create a function as soon as the product is sold the the same quantity should reduced from inventory table
after adding any sales records it should update the stock in the inventory table based on the product and qty purchased
-- */


select * from order_items

Alter table order_items
add column total_sale numeric generated always as (quantity*price_per_unit) stored;




SELECT * FROM products;
-- product_id 1 -- airpod 3rd gen -- 55stock
-- produ id 2 airpod max --39

SELECT * FROM inventory
WHERE product_id = 1;

SELECT * FROM orders;
SELECT * FROM order_items;
SELECT * FROM inventory;
SELECT * FROM products
order_id,
order_date,
customer_id,
seller_id,
order_item_id,
product_id,
quantity,


CREATE OR REPLACE PROCEDURE add_sales2
(
p_order_id INT,
p_customer_id INT,
p_seller_id INT,
p_order_item_id INT,
p_product_id INT,
p_quantity INT
)
LANGUAGE plpgsql
AS $$

DECLARE 
-- all variable
v_count INT;
v_price FLOAT;
v_product VARCHAR(50);

BEGIN
-- Fetching product name and price based p id entered
	SELECT 
		price, product_name
		INTO
		v_price, v_product
	FROM products
	WHERE product_id = p_product_id;
	
-- checking stock and product availability in inventory	
	SELECT 
		COUNT(*) 
		INTO
		v_count
	FROM inventory
	WHERE 
		product_id = p_product_id
		AND 
		stock >= p_quantity;
		
	IF v_count > 0 THEN
	-- add into orders and order_items table
	-- update inventory
		INSERT INTO orders(order_id, order_date, customer_id, seller_id)
		VALUES
		(p_order_id, CURRENT_DATE, p_customer_id, p_seller_id);

		-- adding into order list
		INSERT INTO order_items(order_item_id, order_id, product_id, quantity, price_per_unit)
         VALUES (p_order_item_id, p_order_id, p_product_id, p_quantity, v_price);

		--updating inventory
		UPDATE inventory
		SET stock = stock - p_quantity
		WHERE product_id = p_product_id;
		
		RAISE NOTICE 'Thank you product: % sale has been added also inventory stock updates',v_product; 

	ELSE
		RAISE NOTICE 'Thank you for for your info the product: % is not available', v_product;

	END IF;


END;
$$

call add_sales2
(
25005, 2, 5, 25004, 1, 14
);










































































